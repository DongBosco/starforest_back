name: Deploy EC2

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Github Repository 파일 불러오기
        uses: actions/checkout@v4

      - name: JDK 17 버전 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: 홈으로이동
        run: cd /home/starforest_back


      - name: 현재 디렉토리 출력
        run: pwd

      - name: 현재 디렉토리 파일 목록 확인
        run: ls -al

      - name: application.yml 파일 만들기
        run: |
          mkdir -p ./src/main/resources/
          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: application.yml 파일 생성 확인
        run: |
          echo "Current directory after creating application.yml:"
          pwd
          echo "Files in src/main/resources after creating application.yml:"
          ls -al ./src/main/resources/

      - name: gradlew 파일에 실행 권한 부여
        run: chmod +x ./gradlew

      - name: 테스트 및 빌드하기
        run: ./gradlew bootWar

      - name: 빌드된 파일 이름 변경하기1
        run: mv ./build/libs/*SNAPSHOT.war ./project.war

      - name: 현재 디렉토리 파일 목록 확인
        run: chmod +x project.war

      - name: SCP로 EC2에 빌드된 파일 전송하기
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PASSWORD }}
          source: project.war
          target: /home/ubuntu/myproject/tobe

      - name: SSH로 EC2에 접속하기
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.PASSWORD }}
          script: |
            cd /home/ubuntu/myproject/tobe
            ls -al
            rm -rf /home/ubuntu/myproject/current
            mkdir /home/ubuntu/myproject/current
            mv /home/ubuntu/myproject/tobe/project.war /home/ubuntu/myproject/current/project.war
            cd /home/ubuntu/myproject/current
            sudo fuser -k -n tcp 8080
            sudo nohup java -jar project.war > /dev/null 2>&1 &
            rm -rf /home/ubuntu/myproject/tobe


#name: Deploy To EC2
#
#on:
#  push:
#    branches:
#      - master
#
#jobs:
#  deploy:
#    runs-on: ubuntu-latest
#    steps:
#      - name: Github Repository 파일 불러오기
#        uses: actions/checkout@v4
#
#      - name: JDK 17버전 설치하기
#        uses: actions/setup-java@v4
#        with:
#          distribution: temurin
#          java-version: 17
#
#      - name: application.yml 파일 만들기
#        run: |
#          mkdir -p ./src/main/resources/
#          echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml
#
#      - name: 빌드하기
#        run: |
#          chmod +x ./gradlew
#          ./gradlew bootWar
#
#      - name: 빌드된 파일 이름 변경하기
#        run: mv ./build/libs/*SNAPSHOT.war ./project.war
#
#      - name: 압축하기
#        run: tar -czvf $GITHUB_SHA.tar.gz project.war appspec.yml scripts
#
#      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ap-northeast-2
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: S3에 프로젝트 폴더 업로드하기
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://starforest/$GITHUB_SHA.tar.gz
#
#      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
#        run: aws deploy create-deployment
#          --application-name starforest-server
#          --deployment-config-name CodeDeployDefault.AllAtOnce
#          --deployment-group-name Production
#          --s3-location bucket=starforest,bundleType=tgz,key=$GITHUB_SHA.tar.gz
